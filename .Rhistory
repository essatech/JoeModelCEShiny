# library(config) # DROP
library(shinydashboard)
library(shinydashboardPlus)
library(shinybusy)
library(waiter)
library(shinyWidgets) # DROP
library(htmlwidgets)
#library(highcharter) # DROP
library(dygraphs)
library(sf)
#library(rgdal) # DROP
library(DT)
library(readxl)
library(leaflet)
library(tidyr) # DROP
#library(tidyselect) # DROP
library(reshape2)
#library(rmapshaper) # DROP
library(popbio)
library(testthat)
library(ggplot2)
library(shinyvalidate)
library(ggthemes)
library(plotly)
# Shiny Pre-loader Spinner
options(spinner.color = "#ffffff", spinner.color.background = "#0073b7", spinner.size = 3)
# Upload file size limit to 32MB
options(shiny.maxRequestSize = 32*1024^2)
#-------------------------------------------------
# Load in default stressor response relationships
#-------------------------------------------------
# Load Stressor Response Files
file_name_stressor_response <- paste0("./data/stressor_response_demo.xlsx")
# Extract the stressor response relationships
sr_wb_dat <- JoeModelCE::StressorResponseWorkbook(filename = file_name_stressor_response)
names(sr_wb_dat)
start_time <- Sys.time()
# Designate the stressor response object as a reactive value
rv_stressor_response <- reactiveValues(
main_sheet             = sr_wb_dat$main_sheet,
stressor_names         = sr_wb_dat$stressor_names,
pretty_names           = sr_wb_dat$pretty_names,
sr_dat                 = sr_wb_dat$sr_dat,
active_layer           = sr_wb_dat$stressor_names[1],
active_values_raw      = NULL,
active_values_response = NULL,
active_refresh         = start_time,
hover_values           = FALSE
)
file_name_stressor_magnitude <- paste0("C:/Users/mbayly/Desktop/stressor_magnitude_fixed_TEST.xlsx")
file_name_stressor_magnitude
sm_wb_dat <-  JoeModelCE::StressorMagnitudeWorkbook(
filename = file_name_stressor_magnitude,
scenario_worksheet = 1) # natural_unc
sm_wb_dat <-  JoeModelCE::StressorMagnitudeWorkbook(
filename = file_name_stressor_magnitude,
scenario_worksheet = 1) # natural_unc
head(sm_wb_dat)
head(sm_wb_dat)
filename
scenario_worksheet
filename = file_name_stressor_magnitude
scenario_worksheet
scenario_worksheet = 1
scenario_worksheet
# Define scope variables as NULL
HUC_ID <- Mean <- SD <- NULL
# If work sheet is not set assume first
scenario_worksheet <- ifelse(is.na(scenario_worksheet), 1, scenario_worksheet)
scenario_worksheet
# File to read and view stressor-response relations
data <- readxl::read_excel(filename, sheet = scenario_worksheet)
data
# Round values to two decimal places
data$Mean <- round(data$Mean, 2)
# Ensure that there are no duplicates
dups <- paste0(data$HUC_ID, data$Stressor)
if (any(duplicated(dups))) {
print(dups[which(duplicated(dups))])
return("Duplicated values in stressor magnitude worksheet")
}
data$HUC_ID
filename
target_columns <- c(
"HUC_ID", "NAME", "Stressor", "Stressor_cat", "Mean", "SD",
"Distribution", "Low_Limit", "Up_Limit", "Comments"
)
if (any(colnames(data) != target_columns)) {
return(paste0("Bad column names. Expect columns to be ", paste(target_columns, collapse = ", ")))
}
colnames(data)
target_columns
!("HUC_ID" %in% colnames(data))
!("HUC_ID" %in% colnames(data))
# If HUC_ID column is missing create it from HUC_10
if(!("HUC_ID" %in% colnames(data))) {
if("HUC_10" %in% colnames(data)) {
data$HUC_ID <- data$HUC_10
} else {
stop("Missing HUC ID column")
}
}
# Ensure that all values are formatted properly
target_columns <- c(
"HUC_ID", "NAME", "Stressor", "Stressor_cat", "Mean", "SD",
"Distribution", "Low_Limit", "Up_Limit", "Comments"
)
target_columns %in% colnames(data)
target_columns
all(target_columns %in% colnames(data))
target_columns %in% colnames(data)
stop(paste0("Bad column names. Expect columns to be ", paste(target_columns, collapse = ", ")))
if(!(all(target_columns %in% colnames(data)))) {
stop(paste0("Bad column names. Expect columns to be ", paste(target_columns, collapse = ", ")))
}
data$SD <- as.numeric(data$SD)
data$Mean <- as.numeric(data$Mean)
"Total_Mortality" %in% base::unique(data$Stressor_cat)
runApp()
shiny::runApp()
rm(list = ls())
rm(list = ls())
# Load local package
# library(devtools)
# remove.packages("JoeModelCE")
# devtools::install(pkg = "../package/JoeModelCE/", upgrade = "always")
# devtools::install_github("essatech/JoeModelCE")
# library(JoeModelCE)
# file.sources  <- list.files(path = "../JoeModelCE/R/", pattern = "*.R")
# sapply(paste0("../JoeModelCE/R/", file.sources), source, .GlobalEnv)
library(JoeModelCE)
# Load necessary libraries
library(dplyr)
library(readxl)
library(writexl)
library(shiny)
library(DT)
library(shinyjs)
#library(shinycssloaders) # DROP
#library(lubridate) # DROP
library(shinyFeedback)
# library(dbplyr)
# library(config) # DROP
library(shinydashboard)
library(shinydashboardPlus)
library(shinybusy)
library(waiter)
library(shinyWidgets) # DROP
library(htmlwidgets)
#library(highcharter) # DROP
library(dygraphs)
library(sf)
#library(rgdal) # DROP
library(DT)
library(readxl)
library(leaflet)
library(tidyr) # DROP
#library(tidyselect) # DROP
library(reshape2)
#library(rmapshaper) # DROP
library(popbio)
library(testthat)
library(ggplot2)
library(shinyvalidate)
library(ggthemes)
library(plotly)
#---------------------------------------------------------------------
# Shiny Global Imports
# This is the Shiny App global script.
# This file is sourced and run once when the app first loads
# See tutorial here: https://shiny.rstudio.com/articles/scoping.html
#--------------------------------------------------------------------
rm(list = ls())
# Load local package
# library(devtools)
# remove.packages("JoeModelCE")
# devtools::install(pkg = "../package/JoeModelCE/", upgrade = "always")
# devtools::install_github("essatech/JoeModelCE")
# library(JoeModelCE)
# file.sources  <- list.files(path = "../JoeModelCE/R/", pattern = "*.R")
# sapply(paste0("../JoeModelCE/R/", file.sources), source, .GlobalEnv)
library(JoeModelCE)
# Load necessary libraries
library(dplyr)
library(readxl)
library(writexl)
library(shiny)
library(DT)
library(shinyjs)
#library(shinycssloaders) # DROP
#library(lubridate) # DROP
library(shinyFeedback)
# library(dbplyr)
# library(config) # DROP
library(shinydashboard)
library(shinydashboardPlus)
library(shinybusy)
library(waiter)
library(shinyWidgets) # DROP
library(htmlwidgets)
#library(highcharter) # DROP
library(dygraphs)
library(sf)
#library(rgdal) # DROP
library(DT)
library(readxl)
library(leaflet)
library(tidyr) # DROP
#library(tidyselect) # DROP
library(reshape2)
#library(rmapshaper) # DROP
library(popbio)
library(testthat)
library(ggplot2)
library(shinyvalidate)
library(ggthemes)
library(plotly)
# Shiny Pre-loader Spinner
options(spinner.color = "#ffffff", spinner.color.background = "#0073b7", spinner.size = 3)
# Upload file size limit to 32MB
options(shiny.maxRequestSize = 32*1024^2)
#-------------------------------------------------
# Load in default stressor response relationships
#-------------------------------------------------
# Load Stressor Response Files
file_name_stressor_response <- paste0("./data/stressor_response_demo.xlsx")
# Extract the stressor response relationships
sr_wb_dat <- JoeModelCE::StressorResponseWorkbook(filename = file_name_stressor_response)
names(sr_wb_dat)
start_time <- Sys.time()
# Designate the stressor response object as a reactive value
rv_stressor_response <- reactiveValues(
main_sheet             = sr_wb_dat$main_sheet,
stressor_names         = sr_wb_dat$stressor_names,
pretty_names           = sr_wb_dat$pretty_names,
sr_dat                 = sr_wb_dat$sr_dat,
active_layer           = sr_wb_dat$stressor_names[1],
active_values_raw      = NULL,
active_values_response = NULL,
active_refresh         = start_time,
hover_values           = FALSE
)
#-------------------------------------------------
# Load in default Stressor magnitude
#-------------------------------------------------
# Extract the stressor magnitude values associated with each HUC
# Fixed: stressor_magnitude_fixed_rn_ARTR
# UNC: stressor_magnitude_unc_ARTR
#file_name_stressor_magnitude <- paste0("./data/stressor_magnitude_unc_ARTR.xlsx")
file_name_stressor_magnitude <- paste0("./data/stressor_magnitude_demo.xlsx")
sm_wb_dat <-  JoeModelCE::StressorMagnitudeWorkbook(
filename = file_name_stressor_magnitude,
scenario_worksheet = 1) # natural_unc
# Designate stressor magnitude as reactive values
rv_stressor_magnitude <- reactiveValues(
sm_dat = sm_wb_dat
)
filename = file_name_stressor_magnitude
scenario_worksheet = 1
# Define scope variables as NULL
HUC_ID <- Mean <- SD <- NULL
# If work sheet is not set assume first
scenario_worksheet <- ifelse(is.na(scenario_worksheet), 1, scenario_worksheet)
# File to read and view stressor-response relations
data <- readxl::read_excel(filename, sheet = scenario_worksheet)
# Round values to two decimal places
data$Mean <- round(data$Mean, 2)
# Ensure that there are no duplicates
dups <- paste0(data$HUC_ID, data$Stressor)
if (any(duplicated(dups))) {
# print(dups[which(duplicated(dups))])
print("Duplicated values in stressor magnitude worksheet...")
}
# If HUC_ID column is missing create it from HUC_10
if(!("HUC_ID" %in% colnames(data))) {
if("HUC_10" %in% colnames(data)) {
data$HUC_ID <- data$HUC_10
} else {
stop("Missing HUC ID column")
}
}
# Ensure that all values are formatted properly
target_columns <- c(
"HUC_ID", "NAME", "Stressor", "Stressor_cat", "Mean", "SD",
"Distribution", "Low_Limit", "Up_Limit", "Comments"
)
if(!(all(target_columns %in% colnames(data)))) {
stop(paste0("Bad column names. Expect columns to be ", paste(target_columns, collapse = ", ")))
}
target_columns
colnames(data)
# Ensure that all values are formatted properly
target_columns <- c(
"HUC_ID", "NAME", "Stressor", "Stressor_cat", "Mean", "SD",
"Distribution", "Low_Limit", "Up_Limit"
)
if(!(all(target_columns %in% colnames(data)))) {
stop(paste0("Bad column names. Expect columns to be ", paste(target_columns, collapse = ", ")))
}
rm(list = ls())
# Load local package
# library(devtools)
# remove.packages("JoeModelCE")
# devtools::install(pkg = "../package/JoeModelCE/", upgrade = "always")
# devtools::install_github("essatech/JoeModelCE")
# library(JoeModelCE)
# file.sources  <- list.files(path = "../JoeModelCE/R/", pattern = "*.R")
# sapply(paste0("../JoeModelCE/R/", file.sources), source, .GlobalEnv)
library(JoeModelCE)
# Load necessary libraries
library(dplyr)
library(readxl)
library(writexl)
library(shiny)
library(DT)
library(shinyjs)
#library(shinycssloaders) # DROP
#library(lubridate) # DROP
library(shinyFeedback)
# library(dbplyr)
# library(config) # DROP
library(shinydashboard)
library(shinydashboardPlus)
library(shinybusy)
library(waiter)
library(shinyWidgets) # DROP
library(htmlwidgets)
#library(highcharter) # DROP
library(dygraphs)
library(sf)
#library(rgdal) # DROP
library(DT)
library(readxl)
library(leaflet)
library(tidyr) # DROP
#library(tidyselect) # DROP
library(reshape2)
#library(rmapshaper) # DROP
library(popbio)
library(testthat)
library(ggplot2)
library(shinyvalidate)
library(ggthemes)
library(plotly)
# Shiny Pre-loader Spinner
options(spinner.color = "#ffffff", spinner.color.background = "#0073b7", spinner.size = 3)
# Upload file size limit to 32MB
options(shiny.maxRequestSize = 32*1024^2)
#-------------------------------------------------
# Load in default stressor response relationships
#-------------------------------------------------
# Load Stressor Response Files
file_name_stressor_response <- paste0("./data/stressor_response_demo.xlsx")
# Extract the stressor response relationships
sr_wb_dat <- JoeModelCE::StressorResponseWorkbook(filename = file_name_stressor_response)
names(sr_wb_dat)
start_time <- Sys.time()
# Designate the stressor response object as a reactive value
rv_stressor_response <- reactiveValues(
main_sheet             = sr_wb_dat$main_sheet,
stressor_names         = sr_wb_dat$stressor_names,
pretty_names           = sr_wb_dat$pretty_names,
sr_dat                 = sr_wb_dat$sr_dat,
active_layer           = sr_wb_dat$stressor_names[1],
active_values_raw      = NULL,
active_values_response = NULL,
active_refresh         = start_time,
hover_values           = FALSE
)
#-------------------------------------------------
# Load in default Stressor magnitude
#-------------------------------------------------
# Extract the stressor magnitude values associated with each HUC
# Fixed: stressor_magnitude_fixed_rn_ARTR
# UNC: stressor_magnitude_unc_ARTR
#file_name_stressor_magnitude <- paste0("./data/stressor_magnitude_unc_ARTR.xlsx")
file_name_stressor_magnitude <- paste0("./data/stressor_magnitude_demo.xlsx")
sm_wb_dat <-  JoeModelCE::StressorMagnitudeWorkbook(
filename = file_name_stressor_magnitude,
scenario_worksheet = 1) # natural_unc
# Designate stressor magnitude as reactive values
rv_stressor_magnitude <- reactiveValues(
sm_dat = sm_wb_dat
)
#------------------------------------------------------
# Load in the life stages file for the population model
#------------------------------------------------------
# When app launches defaults will be loaded from this file
life_stages <- read.csv("./data/life cycles.csv")
# Set as a reactive object
rv_life_stages <- reactiveValues(
dat = life_stages
)
rv_eigen_analysis <- reactiveValues(
dat = list()
)
rv_ea_errors <- reactiveValues(
possible_error_state = FALSE,
possible_error_msg = ""
)
rv_show_sample_plot <- reactiveValues(
open = FALSE
)
rv_pop_sample_plot_data <- reactiveValues(
dat = list(),
run_counter = 1
)
# Sand box stressor values
rv_sandbox_stressors <- reactiveValues(
dat = list()
)
rv_pop_data_huc_ts <- reactiveValues(
dat = list(),
dat_baseline = list(),
run_counter = 1,
update_ts_plots = FALSE,
joe_model_comp = NULL
)
rv_show_pop_main_plot <- reactiveValues(
open = FALSE
)
#-------------------------------------------------
# Map geometry and map object reactive values
#-------------------------------------------------
# Load in the default watersheds geojson layer - Athabasca
hmdl <- sf::st_read("./data/watersheds.gpkg")
hmdl$HUC_ID <- as.numeric(hmdl$HUC_ID)
hmdl$uid <- paste0(hmdl$HUC_ID, "|", hmdl$NAME)
# Which variable should be displayed first - alphabetical
first_var <- sort(sr_wb_dat$stressor_names)[1]
# Save default HUC to reactive values
rv_HUC_geom <- reactiveValues(
huc_geom = hmdl,              # Polygon geometry global reactive object
leg_col = NA,                 # Legend color to display
leg_lab = NA,                 # Legend label to display
color_df = NA                 # Color reference data frame
)
# Layer bounds for initial load
# If a new polygon file is imported the layer is updated
# and map zoom and pan should change
bbox <- st_bbox(hmdl)
rv_HUC_layer_load <- reactiveValues(
data = hmdl,
xmin = bbox$xmin,
ymin = bbox$ymin,
xmax = bbox$xmax,
ymax = bbox$ymax,
reload_map = TRUE,
add_polygons = FALSE
)
# Trigger redraw to clear selection
rv_redraw <- reactiveValues(
redraw = 0
)
# Selected HUCs - Create an empty vector to hold all HUC click ids
rv_clickedIds <- reactiveValues(ids = vector())
# Selected HUCs Cumulative System Capacity - store temporary CSC for selected HUCs
rv_clickedIds_csc <- reactiveValues(csc = NA, var_csc = NA)
# Timer to prevent caching
# (necessary in some modules for css issues with dygraphs)
rv_timer <- reactiveValues(time = Sys.time())
# Show all csc plots (time consuming)
rv_show_all_plots <- reactiveValues(show_all = NULL)
# System Capacity Choropleth Map
# Color ramp is 0 - 100 (global) across all variables
color_func <- colorQuantile(c("#f22300", "#e0af00", "#ebcc2a",
"#79b7c5", "#3b9ab2"),
domain = c(0, 100),
na.color = "lightgrey",
n = 8)
# Generate legend - will always be 0 - 100 for system capacity
leg_col <- lapply(c(0, 20, 40, 60, 80, 100), color_func) %>% unlist()
leg_lab <- c(0, 20, 40, 60, 80, 100)
# Set number of Monte Carlo simulations for the Joe model
MC.sims <- 100
# Scenarios to run
scn.run <- "natural_unc"
# Boolean to trigger doses read from file
read.dose <- TRUE
# Joe model results holder - assume multiple runs
rv_joe_model_results <- reactiveValues(
sims = list()
)
# Joe model scenario name holder - assume multiple runs
rv_joe_model_sim_names <- reactiveValues(
scenario_names = list()
)
# Place holder for Joe Model estimated run times
rv_joe_model_run_time <- reactiveValues(
run_time_seconds = list()
)
# Flag to test if user cursor is over map
rv_map_shape <- reactiveVal(FALSE) # Single value
# Placeholders for the click locations of HUC IDs
rv_map_location <- reactiveValues(huc_id = NULL, huc_name = NULL, lat = NULL, lng = NULL) # List of values
#------------------------------------------
shiny::runApp()
shiny::runApp()
showLogs()
runApp()
showLogs()
showLog()
shiny::runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
shiny::runApp()
